// src/ChatAssistant.jsx
import React, { useState } from "react";
import promptsAssistant from "./data/promptsAssistant";
import "./styles.css";

function ChatAssistant() {
  const [selectedCategory, setSelectedCategory] = useState("");
  const [selectedTask, setSelectedTask] = useState("");
  const [details, setDetails] = useState("");
  const [output, setOutput] = useState("");

  const catLabels = {
    analysis: "üìä An√°lisis Financiero",
    communication: "üí¨ Comunicaci√≥n Empresarial",
    proposals: "üíº Propuestas y Cotizaciones",
    dashboards: "üìà Reportes y Dashboards",
    compliance: "üßæ Cumplimiento Fiscal",
    audit: "üîç Auditor√≠a y Control",
    international: "üåç Clientes Internacionales",
  };

  const taskLabels = {
    fin_diag: "Diagn√≥stico Financiero",
    cash: "Proyecci√≥n de Flujo de Caja",
    ratios: "An√°lisis de Ratios",
    break_even: "Punto de Equilibrio",
    scenario: "An√°lisis de Escenarios",
    client_letter: "Carta al Cliente",
    board_report: "Reporte para Junta",
    email_reminder: "Correo Recordatorio",
    policy_summary: "Resumen de Pol√≠tica",
    negotiation: "Negociaci√≥n con Cliente",
    proposal_full: "Propuesta Integral",
    pricing: "Cotizaci√≥n por Paquetes",
    service_scope: "Definici√≥n de Alcance",
    contract: "Borrador de Contrato",
    differentiation: "Ventajas Competitivas",
    kpi_dashboard: "Dashboard Ejecutivo",
    early_warnings: "Alertas Tempranas",
    tax_tracker: "Dashboard Fiscal",
    budget_control: "Control Presupuestal",
    consolidation: "Consolidaci√≥n Financiera",
    fiscal_calendar: "Calendario Fiscal",
    checklist: "Checklist Normativo",
    risk_map: "Mapa de Riesgos",
    updates: "Actualizaciones Normativas",
    sanctions: "Sanciones Comunes",
    audit_program: "Programa de Auditor√≠a",
    controls: "Control Interno",
    fraud_signs: "Indicadores de Fraude",
    evidence: "Procedimientos de Evidencia",
    report: "Informe de Auditor√≠a",
    multicurrency: "Reporte Multi-moneda",
    ifrs: "Aplicaci√≥n NIIF/IFRS",
    tax_compare: "Comparaci√≥n Fiscal Internacional",
    transfer_pricing: "Precios de Transferencia",
    crossborder: "Operaciones Transfronterizas",
  };
const promptsAssistant = {
  analysis: {
    fin_diag: "üßÆ Act√∫a como un CFO senior. Realiza un diagn√≥stico financiero integral para este cliente: {{details}}.",
    cash: "üí∞ Proyecta el flujo de caja a 6 meses para: {{details}}.",
    ratios: "üìä Calcula e interpreta los principales ratios financieros para: {{details}}.",
    break_even: "üìà Calcula el punto de equilibrio de: {{details}}.",
    scenario: "üìâ Realiza un an√°lisis de escenarios para: {{details}}."
  },
  communication: {
    client_letter: "‚úâÔ∏è Redacta una carta profesional dirigida al cliente explicando: {{details}}.",
    board_report: "üìë Elabora un reporte para Junta Directiva con contexto: {{details}}.",
    email_reminder: "üì¨ Escribe un correo recordatorio para: {{details}}.",
    policy_summary: "üìò Resume en lenguaje claro una pol√≠tica contable/fiscal para: {{details}}.",
    negotiation: "ü§ù Redacta un mensaje para negociar honorarios con un cliente: {{details}}."
  },
  proposals: {
    proposal_full: "üìã Desarrolla una propuesta integral de servicios contables para: {{details}}.",
    pricing: "üíµ Crea una cotizaci√≥n en 3 paquetes (B√°sico, Pro, Premium) para: {{details}}.",
    service_scope: "üßæ Define el alcance de servicios contables y financieros para: {{details}}.",
    contract: "üß† Genera un borrador de contrato de servicios profesionales para: {{details}}.",
    differentiation: "üöÄ Explica las ventajas competitivas de tu propuesta para: {{details}}."
  },
  dashboards: {
    kpi_dashboard: "üìà Crea un dashboard ejecutivo mensual con KPIs cr√≠ticos basado en: {{details}}.",
    early_warnings: "‚ö†Ô∏è Dise√±a un sistema de alertas tempranas con KPIs para: {{details}}.",
    tax_tracker: "üìä Elabora un dashboard de control fiscal para: {{details}}.",
    budget_control: "üìâ Dise√±a un tablero de control presupuestal para: {{details}}.",
    consolidation: "üîó Dise√±a un dashboard de consolidaci√≥n financiera para: {{details}}."
  },
  compliance: {
    fiscal_calendar: "üóìÔ∏è Genera un calendario de obligaciones fiscales para: {{details}}.",
    checklist: "‚úÖ Dise√±a un checklist de cumplimiento normativo para: {{details}}.",
    risk_map: "üß© Crea un mapa de riesgos fiscales y laborales para: {{details}}.",
    updates: "üì∞ Explica los cambios normativos recientes para: {{details}}.",
    sanctions: "‚öñÔ∏è Genera un resumen de sanciones comunes para: {{details}}."
  },
  audit: {
    audit_program: "üîç Prepara un programa de auditor√≠a basado en riesgos para: {{details}}.",
    controls: "üßæ Elabora un checklist de control interno para: {{details}}.",
    fraud_signs: "üïµÔ∏è Lista indicadores de fraude financiero en: {{details}}.",
    evidence: "üìÇ Redacta los procedimientos de obtenci√≥n de evidencia para: {{details}}.",
    report: "üìã Elabora un informe de hallazgos de auditor√≠a para: {{details}}."
  },
  international: {
    multicurrency: "üåç Genera un reporte consolidado multi-moneda para: {{details}}.",
    ifrs: "üìò Explica c√≥mo aplicar las NIIF/IFRS en el contexto de: {{details}}.",
    tax_compare: "üíº Compara la carga fiscal en dos pa√≠ses aplicable a: {{details}}.",
    transfer_pricing: "üí∂ Redacta un informe de precios de transferencia para: {{details}}.",
    crossborder: "‚úàÔ∏è Genera un an√°lisis de operaciones transfronterizas para: {{details}}."
  }
};

export default promptsAssistant;

  const handleGenerate = () => {
    if (!selectedCategory || !selectedTask) {
      setOutput("‚ö†Ô∏è Selecciona categor√≠a y tarea primero.");
      return;
    }

    const template = promptsAssistant[selectedCategory]?.[selectedTask];
    if (!template) {
      setOutput("‚ùå No se encontr√≥ la plantilla seleccionada.");
      return;
    }

    const finalPrompt = template.replace(/{{\s*details\s*}}/gi, details || "[sin detalles]");
    setOutput(`üìå Prompt generado:\n\n${finalPrompt}`);
  };

  return (
    <div className="assistant-container">
      <h3 className="assistant-title">ü§ñ Asistente Virtual Contador 4.0</h3>

      <label className="assistant-label">Categor√≠a</label>
      <select
        className="assistant-select"
        value={selectedCategory}
        onChange={(e) => {
          setSelectedCategory(e.target.value);
          setSelectedTask("");
        }}
      >
        <option value="">Seleccionar categor√≠a...</option>
        {Object.keys(promptsAssistant).map((cat) => (
          <option key={cat} value={cat}>
            {catLabels[cat] || cat}
          </option>
        ))}
      </select>

      <label className="assistant-label">Tarea</label>
      <select
        className="assistant-select"
        value={selectedTask}
        onChange={(e) => setSelectedTask(e.target.value)}
        disabled={!selectedCategory}
      >
        <option value="">Seleccionar tarea...</option>
        {selectedCategory &&
          Object.keys(promptsAssistant[selectedCategory] || {}).map((task) => (
            <option key={task} value={task}>
              {taskLabels[task] || task}
            </option>
          ))}
      </select>

      <label className="assistant-label">Detalles / Contexto</label>
      <textarea
        className="assistant-textarea"
        rows="5"
        value={details}
        onChange={(e) => setDetails(e.target.value)}
        placeholder="Ej: Empresa de restaurantes; ventas 200M (2024); problema: liquidez en mayo"
      />

      <button className="assistant-button" onClick={handleGenerate}>
        Generar respuesta
      </button>

      <div className="assistant-output">{output}</div>
    </div>
  );
}

export default ChatAssistant;
